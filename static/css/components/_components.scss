@use '../base/variables' as var;

// ベースボタン
%btn-base {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: var.$spacing-sm var.$spacing-base;
    font: inherit;
    border: var.$border;
    border-radius: var.$border-radius;
    background: var.$color-surface;
    color: var.$color-text;
    cursor: pointer;
    transition: all var.$transition;
    text-decoration: none;

    &:hover {
        background: var.$color-hover;
        border-color: var.$gray-400;
    }

    &:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }
}

// アイコンボタン
.material-symbols-outlined {
    @extend %btn-base;
    width: 2.5rem;
    height: 2.5rem;
    padding: 0;
    border: none;
    background: transparent;
    color: var.$color-text-secondary;
    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;

    &:hover {
        background: var.$color-hover;
        color: var.$color-text;
    }
}

// フォーム要素
%form-control {
    width: 100%;
    padding: var.$spacing-sm;
    font: inherit;
    color: var.$color-text;
    background: var.$color-surface;
    border: var.$border;
    border-radius: var.$border-radius;
    transition: border-color var.$transition;

    &:focus {
        outline: none;
        border-color: var.$color-focus;
    }

    &::placeholder {
        color: var.$color-text-muted;
    }
}

.form-input {
    @extend %form-control;
}

.form-textarea {
    @extend %form-control;
    min-height: 6rem;
    resize: vertical;
}

.form-select {
    @extend %form-control;
}

// リスト
.category-list,
.task-list {
    display: flex;
    flex-direction: column;
    gap: var.$spacing-sm;
    list-style: none;
    margin: 0;
    padding: 0;
}

.category-item {
    display: flex;
    align-items: center;
    position: relative;
    transition: padding var.$transition;
    
    // 削除モード時のパディング調整
    &.delete-mode,
    &:has(.delete-category-btn.visible) {
        padding-left: 2rem;
    }
}

.category-button {
    flex: 1;
    padding: var.$spacing-sm;
    font-size: var.$font-size-md;
    text-align: left;
    background: transparent;
    border: none;
    border-radius: var.$border-radius;
    color: var.$color-text;
    cursor: pointer;
    transition: all var.$transition;

    &:hover {
        background: var.$color-hover;
    }

    &.active {
        font-weight: var.$font-weight-bold;
        background: var.$gray-100;
    }
}

// タスクアイテム（元のデザインに戻す）
.task-item {
    display: flex;
    align-items: center;
    padding: var.$spacing-sm;
    background: var.$color-surface;
    border: var.$border;
    border-radius: var.$border-radius;
    cursor: pointer;
    transition: all var.$transition;
    position: relative;
    min-height: 2.5rem;
    width: 100%;
    box-sizing: border-box;
    
    // クリック範囲を確実にする
    pointer-events: auto;
    z-index: 1; // 他の要素より前面に

    &:hover {
        box-shadow: var.$shadow-hover;
        background: var.$color-hover;
    }

    &:active {
        transform: scale(0.98);
    }

    // ドラッグ中は編集を無効化
    &.sortable-chosen,
    &.sortable-ghost {
        cursor: grabbing;
        pointer-events: none;
    }

    // 削除モード時のパディング調整
    &.delete-mode,
    &:has(.delete-task-btn.visible) {
        padding-left: 2.5rem;
    }
}

// タスクタイトル（クリックイベントを親に委譲）
.task-title {
    flex: 1;
    font-size: var.$font-size-base;
    font-weight: var.$font-weight-normal;
    color: var.$color-text;
    margin: 0;
    padding: var.$spacing-xs; // 小さなパディングでクリック範囲を拡大
    word-wrap: break-word;
    line-height: 1.4;
    text-align: left;
    pointer-events: none; // クリックイベントを親に委譲
    user-select: none; // テキスト選択を無効化
}

// タスクリスト（クリック範囲の問題を修正）
.task-list {
    display: flex;
    flex-direction: column;
    gap: var.$spacing-sm;
    list-style: none;
    padding: var.$spacing-sm; // パディングを追加してクリック範囲を確保
    margin: 0;
    min-height: 100px;
    border: 2px dashed transparent;
    border-radius: var.$border-radius;
    transition: all var.$transition;
    align-items: stretch; // 子要素を横幅いっぱいに拡張
    justify-content: flex-start;
    
    &.drag-over {
        border-color: var.$success-color;
        background-color: rgba(76, 175, 80, 0.05);
    }
}

// ドラッグ中のスタイル
.task-dragging {
    .task-item:not(.sortable-chosen) {
        opacity: 0.6;
    }
    
    .task-list {
        border: 2px dashed var.$gray-300;
        border-radius: var.$border-radius;
        min-height: 100px;
        padding: var.$spacing-sm;
        
        &.drag-over {
            border-color: var.$success-color;
            background-color: rgba(76, 175, 80, 0.1);
        }
    }
}

.sortable-ghost {
    opacity: 0.4;
    background: var.$gray-100 !important;
}

.sortable-chosen {
    box-shadow: var.$shadow-hover;
}

// モーダル
.modal {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 90%;
    max-width: 420px;
    transform: translate(-50%, -50%);
    background: var.$color-surface;
    border: none;
    border-radius: 12px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.15);
    z-index: var.$z-modal;
    overflow: hidden;
    backdrop-filter: blur(8px);

    &.hidden {
        display: none;
    }
}

.modal-form {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.875rem;
}

.modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    color: var.$color-text;
    text-align: center;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var.$gray-200;
    letter-spacing: -0.025em;
}

// モーダル内フォーム要素の統一スタイル（タイトな余白）
.modal-form {
    .form-input,
    .form-textarea,
    .form-select,
    input[type="text"],
    textarea,
    select {
        @extend %form-control;
        margin-bottom: 0.75rem;
        font-size: var.$font-size-base;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1.5px solid var.$gray-200;
        transition: all 0.2s ease;
        
        &:focus {
            border-color: var.$gray-600;
            box-shadow: 0 0 0 3px rgba(66, 66, 66, 0.1);
        }
        
        &:last-of-type {
            margin-bottom: 1rem;
        }
    }
    
    // 特定のクラス名のスタイルも統一（タイトな余白）
    .add-task-title,
    .edit-task-title,
    .textbox-category {
        @extend %form-control;
        margin-bottom: 0.75rem;
        font-size: var.$font-size-base;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1.5px solid var.$gray-200;
        transition: all 0.2s ease;
        
        &:focus {
            border-color: var.$gray-600;
            box-shadow: 0 0 0 3px rgba(66, 66, 66, 0.1);
        }
    }
    
    .add-task-content,
    .edit-task-content {
        @extend %form-control;
        min-height: 80px;
        max-height: 120px;
        resize: vertical;
        margin-bottom: 0.5rem;
        font-size: var.$font-size-base;
        line-height: 1.5;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1.5px solid var.$gray-200;
        transition: all 0.2s ease;
        
        &:focus {
            border-color: var.$gray-600;
            box-shadow: 0 0 0 3px rgba(66, 66, 66, 0.1);
        }
    }
    
    .edit-task-category {
        @extend %form-control;
        margin-bottom: 0.75rem;
        font-size: var.$font-size-base;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        border: 1.5px solid var.$gray-200;
        transition: all 0.2s ease;
        
        &:focus {
            border-color: var.$gray-600;
            box-shadow: 0 0 0 3px rgba(66, 66, 66, 0.1);
        }
    }
    
    // 隠しフィールド
    input[type="hidden"] {
        display: none;
        margin: 0;
    }
}

// 文字数カウント表示の統一（タイト）
.char-count {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin: 0 0 1rem 0;
    
    #char-count {
        font-size: 0.75rem;
        color: var.$gray-500;
        padding: 0.375rem 0.75rem;
        background: var.$gray-50;
        border-radius: 16px;
        border: 1px solid var.$gray-200;
        font-weight: 500;
        letter-spacing: 0.025em;
    }
}

// タスクモーダルボトム要素の統一（タイト）
.task-modal-bottom {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.25rem;
    margin-bottom: 1rem;
    
    #char-count {
        font-size: 0.75rem;
        color: var.$gray-500;
        padding: 0.375rem 0.75rem;
        background: var.$gray-50;
        border-radius: 16px;
        border: 1px solid var.$gray-200;
        font-weight: 500;
        letter-spacing: 0.025em;
    }
}

.task-modal-bottom-sub {
    display: flex;
    justify-content: center;
    margin-top: 0;
}

// モーダルボタングループの統一（タイト）
.modal-btns {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    margin-top: 1.25rem;
    padding-top: 1rem;
    border-top: 1px solid var.$gray-200;
}

// モーダルボタンの統一スタイル（コンパクト）
.modal-btn {
    @extend %btn-base;
    min-width: 100px;
    padding: 0.75rem 1.25rem;
    font-size: 0.875rem;
    font-weight: 600;
    border-radius: 8px;
    transition: all 0.2s ease;
    border: 1.5px solid transparent;
    letter-spacing: -0.025em;
    
    &[type="submit"] {
        background: var.$gray-800;
        color: var.$white;
        border-color: var.$gray-800;
        
        &:hover {
            background: var.$gray-900;
            border-color: var.$gray-900;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(66, 66, 66, 0.3);
        }
        
        &:active {
            transform: translateY(0);
            box-shadow: 0 2px 8px rgba(66, 66, 66, 0.2);
        }
    }
    
    &[type="button"] {
        background: var.$white;
        color: var.$gray-700;
        border-color: var.$gray-300;
        
        &:hover {
            background: var.$gray-50;
            border-color: var.$gray-400;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        &:active {
            transform: translateY(0);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }
    }
}

// レスポンシブ対応（タイト余白）
@media (max-width: 640px) {
    .modal {
        width: 95%;
        max-width: none;
        margin: 1rem;
        border-radius: 16px;
    }
    
    .modal-form {
        padding: 1.25rem;
        gap: 0.75rem;
    }
    
    .modal-title {
        font-size: 1.125rem;
        margin-bottom: 0.875rem;
        padding-bottom: 0.625rem;
    }
    
    .modal-form {
        .add-task-content,
        .edit-task-content {
            min-height: 70px;
            max-height: 100px;
        }
        
        .form-input,
        .form-textarea,
        .form-select,
        input[type="text"],
        textarea,
        select,
        .add-task-title,
        .edit-task-title,
        .textbox-category,
        .edit-task-category {
            margin-bottom: 0.625rem;
            padding: 0.625rem 0.875rem;
        }
    }
    
    .modal-btns {
        flex-direction: column;
        gap: 0.625rem;
        margin-top: 1rem;
        padding-top: 0.875rem;
        
        .modal-btn {
            width: 100%;
            min-width: auto;
            padding: 0.625rem 1rem;
        }
    }
    
    .char-count,
    .task-modal-bottom {
        margin-bottom: 0.75rem;
        
        #char-count {
            padding: 0.25rem 0.625rem;
            font-size: 0.6875rem;
        }
    }
}

// モーダル背景オーバーレイ
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(4px);
    z-index: calc(var.$z-modal - 1);
    
    &.hidden {
        display: none;
    }
}

// 削除ボタン（既存のスタイル維持）
.delete-category-btn,
.delete-task-btn {
    width: 1.8rem;
    height: 1.8rem;
    position: absolute;
    left: -0.5rem;
    top: 50%;
    background: var.$danger-color;
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    font-size: 0.8rem;
    z-index: 10;
    
    display: none;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transform: translateY(-50%) scale(0);
    
    &.visible {
        display: block !important;
        opacity: 1 !important;
        visibility: visible !important;
        pointer-events: auto !important;
        transform: translateY(-50%) scale(1) !important;
        animation: popupFromLeft 0.3s ease-out;
    }

    &.visible:hover {
        background: #ff5252;
        transform: translateY(-50%) scale(1.1) !important;
    }
}

@keyframes popupFromLeft {
    0% { 
        opacity: 0;
        transform: translateY(-50%) translateX(-1rem) scale(0);
    }
    70% { 
        transform: translateY(-50%) translateX(0.2rem) scale(1.1);
    }
    100% { 
        opacity: 1;
        transform: translateY(-50%) translateX(0) scale(1);
    }
}